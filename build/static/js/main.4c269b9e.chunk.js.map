{"version":3,"sources":["Component/postWithUpload_frontToBack.js","Component/ListTous.js","Component/AfficheProfil.js","App.js","serviceWorker.js","index.js"],"names":["PostFrontToBack","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","nom","email","password","photo_profil","onChange","bind","assertThisInitialized","handleUploadImage","event","setState","defineProperty","target","name","value","ev","_this2","preventDefault","data","FormData","append","uploadInput","files","fetch","method","body","then","response","json","concat","console","log","_this3","react_default","a","createElement","onSubmit","type","ref","React","Component","ListTous","profil","axios","get","catch","error","className","length","map","obj","key","_id","width","height","src","alt","liste","AfficheProfil","location","pathname","id","nam","mail","mdp","photo","App","BrowserRouter","Route","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c269b9e.chunk.js","sourcesContent":["\nimport React from 'react';\n\nclass PostFrontToBack extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n     nom: '',\n     email:'',\n      password:'',\n      photo_profil:''\n\n    };\n    this.onChange = this.onChange.bind(this)\n    this.handleUploadImage = this.handleUploadImage.bind(this);\n  }\n\n\n\n\n  onChange(event) {\n    this.setState({\n        [event.target.name]: event.target.value\n    })\n}\n\n\n\n\n\n  handleUploadImage(ev) {\n    ev.preventDefault();\n\n    const data = new FormData();\n    data.append('photo_profil', this.uploadInput.files[0]);\n    data.append('nom',this.state.nom);\n    data.append('email',this.state.email);\n    data.append('password',this.state.password)\n\n    fetch('http://localhost:8080/profil', {\n      method: 'POST',\n      body: data,\n    }).then((response) => {\n      response.json().then((body) => {\n        this.setState({ photo_profil: `http://localhost:8080/profil/${body.photo_profil}` });\n        console.log('ity ilay body.fil',body.photo_profil);\n        \n      });\n    });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleUploadImage}>\n        <label>Nom:</label>\n        <input type=\"text\"\n          value={this.state.value}\n          onChange={this.onChange}\n          name=\"nom\" /><br></br>\n          <label>email:</label>\n        <input type=\"email\"\n          value={this.state.value}\n          onChange={this.onChange}\n          name=\"email\" /><br></br>\n        <label>passeword:</label>\n        <input type=\"password\"\n          value={this.state.value}\n          onChange={this.onChange}\n          name=\"password\" /><br></br>       \n      \n          <input ref={(ref) => { this.uploadInput = ref; }} type=\"file\" name=\"photo_profil\"/>\n       \n          <button>Ajouter</button>\n      </form>\n    );\n  }\n}\n\nexport default PostFrontToBack;\n","\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\n\nexport default class ListTous extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { profil: [] };\n\n    }\n    componentDidMount() {\n        axios.get('http://localhost:8080/profil')\n            .then(response => {\n                console.log('i am a response', response)\n                this.setState({ profil: response.data });\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n\n        \n\n    }\n\n    liste() {\n        return <div>\n            <div className=\"table-responsive\">\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th>ID</th>\n                            <th>NOM</th>\n                            <th>EMAIL</th>\n                            <th>PASSWORD</th>\n                            <th>PHOTO</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            (this.state.profil.length > 0) ? (this.state.profil.map((obj) => {\n                                return <tr key={obj._id}>\n                                    <td>{obj._id}</td>\n                                    <td>{obj.nom}</td>\n                                    <td>{obj.email}</td>\n                                    <td>{obj.password}</td>\n                                    <td><img width=\"150px\" height=\"50px\" src={'http://localhost:8080/user/'+obj.photo_profil} alt=\"pdp\" />\n                                    </td>\n                                    {console.log(obj)}\n                                </tr>\n\n                            })) : ('')\n                        }\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    }\n    render() {\n        return (\n            <div>\n                {this.liste()}\n            </div>\n        );\n    }\n}","\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\n\nexport default class AfficheProfil extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { profil: [] };\n\n  }\n  componentDidMount() {\n    axios.get('http://localhost:8080' + this.props.location.pathname)\n      .then(response => {\n        console.log('i am a response', response)\n        this.setState({ id: response.data._id });\n        this.setState({ nam: response.data.nom });\n        console.log('i am a response', response.data.email)\n        this.setState({ mail: response.data.email });\n        this.setState({ mdp: response.data.password });\n        this.setState({ photo: response.data.photo_profil });\n      })\n      .catch(function (error) {\n        console.log(error);\n      })\n  }\n\n  liste() {\n      return(\n          <div className=\"table-responsive\">\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <h2>profil</h2>\n                </tr>\n                <tr>\n                  <th>ID</th>\n                  <th>NOM</th>\n                  <th>EMAIL</th>\n                  <th>PASSWORD</th>\n                  <th>PHOTO</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>{this.state.id}</td>\n                  <td>{this.state.nam}</td>\n                  <td>{this.state.mail}</td>\n                  <td>{this.state.mdp}</td>\n                  <td><img  alt=\"pdp\" width=\"50px\" height=\"50px\" src={'http://localhost:8080/user/'+this.state.photo}/></td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n      )\n\n  }\n  render() {\n    return (\n      <div>\n        {this.liste()}\n      </div>\n    );\n  }\n}","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport PostFrontToBack from './Component/postWithUpload_frontToBack';\nimport ListTous from './Component/ListTous'\nimport AfficheProfil from './Component/AfficheProfil'\n class App extends Component {\n  render() {\n    return (\n      <Router>\n      <div className=\"container\">\n        <Route path=\"/\" exact component={PostFrontToBack} />\n        <Route path=\"/profil\" exact component={ListTous} />\n        <Route path=\"/profil/:profilId\" exact component={AfficheProfil} />\n      </div>\n    </Router>     \n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}